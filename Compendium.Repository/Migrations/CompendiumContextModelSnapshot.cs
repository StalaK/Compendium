// <auto-generated />
using System;
using Compendium.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Compendium.Repository.Migrations
{
    [DbContext(typeof(CompendiumContext))]
    partial class CompendiumContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Compendium.Repository.Models.BoardGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Genre")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxGameLength")
                        .HasColumnType("integer");

                    b.Property<int>("MaxNoOfPlayers")
                        .HasColumnType("integer");

                    b.Property<int?>("MinGameLength")
                        .HasColumnType("integer");

                    b.Property<int>("MinNoOfPlayers")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Publisher")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UserAdded")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BoardGames");
                });

            modelBuilder.Entity("Compendium.Repository.Models.Book", b =>
                {
                    b.Property<string>("Isbn")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Edition")
                        .HasColumnType("integer");

                    b.Property<int>("Format")
                        .HasColumnType("integer");

                    b.Property<int>("Genre")
                        .HasColumnType("integer");

                    b.Property<string>("Pages")
                        .HasColumnType("text");

                    b.Property<string>("Publisher")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UserAdded")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Isbn");

                    b.HasIndex("UserId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Compendium.Repository.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Console")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Format")
                        .HasColumnType("integer");

                    b.Property<int>("Genre")
                        .HasColumnType("integer");

                    b.Property<bool>("LocalMultiplayer")
                        .HasColumnType("boolean");

                    b.Property<string>("Publisher")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UserAdded")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Compendium.Repository.Models.LoanedBoardGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BoardGameId")
                        .HasColumnType("integer");

                    b.Property<int?>("PeopleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoardGameId");

                    b.HasIndex("PeopleId");

                    b.ToTable("LoanedBoardGames");
                });

            modelBuilder.Entity("Compendium.Repository.Models.LoanedBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BookIsbn")
                        .HasColumnType("character varying(13)");

                    b.Property<int?>("PeopleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookIsbn");

                    b.HasIndex("PeopleId");

                    b.ToTable("LoanedBooks");
                });

            modelBuilder.Entity("Compendium.Repository.Models.LoanedGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("PeopleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PeopleId");

                    b.ToTable("LoanedGames");
                });

            modelBuilder.Entity("Compendium.Repository.Models.People", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Surname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Compendium.Repository.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Compendium.Repository.Models.BoardGame", b =>
                {
                    b.HasOne("Compendium.Repository.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Compendium.Repository.Models.Book", b =>
                {
                    b.HasOne("Compendium.Repository.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Compendium.Repository.Models.Game", b =>
                {
                    b.HasOne("Compendium.Repository.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Compendium.Repository.Models.LoanedBoardGame", b =>
                {
                    b.HasOne("Compendium.Repository.Models.BoardGame", null)
                        .WithMany("LoanedBoardGame")
                        .HasForeignKey("BoardGameId");

                    b.HasOne("Compendium.Repository.Models.People", null)
                        .WithMany("LoanedBoardGames")
                        .HasForeignKey("PeopleId");
                });

            modelBuilder.Entity("Compendium.Repository.Models.LoanedBook", b =>
                {
                    b.HasOne("Compendium.Repository.Models.Book", null)
                        .WithMany("LoanedBook")
                        .HasForeignKey("BookIsbn");

                    b.HasOne("Compendium.Repository.Models.People", null)
                        .WithMany("LoanedBooks")
                        .HasForeignKey("PeopleId");
                });

            modelBuilder.Entity("Compendium.Repository.Models.LoanedGame", b =>
                {
                    b.HasOne("Compendium.Repository.Models.Game", null)
                        .WithMany("LoanedGame")
                        .HasForeignKey("GameId");

                    b.HasOne("Compendium.Repository.Models.People", null)
                        .WithMany("LoanedGames")
                        .HasForeignKey("PeopleId");
                });

            modelBuilder.Entity("Compendium.Repository.Models.BoardGame", b =>
                {
                    b.Navigation("LoanedBoardGame");
                });

            modelBuilder.Entity("Compendium.Repository.Models.Book", b =>
                {
                    b.Navigation("LoanedBook");
                });

            modelBuilder.Entity("Compendium.Repository.Models.Game", b =>
                {
                    b.Navigation("LoanedGame");
                });

            modelBuilder.Entity("Compendium.Repository.Models.People", b =>
                {
                    b.Navigation("LoanedBoardGames");

                    b.Navigation("LoanedBooks");

                    b.Navigation("LoanedGames");
                });
#pragma warning restore 612, 618
        }
    }
}
